apply plugin: 'maven-publish'

// https://docs.gradle.org/current/userguide/publishing_maven.html#sec:publishing_multiple_modules_to_maven
// publish to the remote Nexus build with `./gradlew clean build publish`

// Sample way to checkout:
// Just execute `gradle clean build publishToMavenLocal`. Check out result stuff on the
// `~/.m2/repository/cn/dreamtobe/splitaar/sample/splitaar-sample-api` and
// `~/.m2/repository/cn/dreamtobe/splitaar/sample/splitaar-sample-impl`

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        impl(MavenPublication) {
            groupId GROUP_ID
            artifactId POM_ARTIFACT_ID
            version VERSION_NAME

            artifact(sourcesJar)
            artifact(javadocJar)
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }

    repositories {
        Properties properties = new Properties()
        def localFile = project.rootProject.file('local.properties')
        def mvnName=""
        def mvnPassword=""
        if (localFile.exists()) {
            properties.load(localFile.newDataInputStream())
            mvnName = properties.getProperty("mvn.user")
            mvnPassword = properties.getProperty("mvn.password")
        } else {

        }

        maven {
            // you even can publish to the repo folder in the buildDirwith : url "$buildDir/repo"
            if (VERSION_NAME.endsWith('-SNAPSHOT')) {
                url SNAPSHOT_REPOSITORY_URL
            } else {
                url RELEASE_REPOSITORY_URL
            }
            credentials {
                username mvnName
                password mvnPassword
            }
        }
    }
}